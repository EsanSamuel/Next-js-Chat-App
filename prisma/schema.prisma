// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  image          String?
  email          String    @unique
  bio            String?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  hashedPassword String?

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessagesIds String[]  @db.ObjectId
  seenMessages    Message[] @relation("Seen", fields: [seenMessagesIds], references: [id])

  messages Message[]
  Stories  Stories[]
  Pinned   Pinned[]
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  groupName     String?
  isMulti       Boolean?
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  groupImage String?

  messageIds String[]  @db.ObjectId
  messages   Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
  Pinned  Pinned[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id])
}

model Stories {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  image     String?
  body      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pinned {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  pinnedAt DateTime @default(now())

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
